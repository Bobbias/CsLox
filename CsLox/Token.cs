using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CsLox
{
    /// <summary>
    /// Represents a lexical token generated by the <see cref="CsLox.Scanner"/> by processing Lox source code.
    /// </summary>
    public class Token
    {
        /// <summary>
        /// Represents the different kinds of Token objects of which the Lox language is comprised.
        /// </summary>
        public enum TokenType
        {
            // Single-character tokens.
            LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,
            COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,

            // One or two character tokens.
            BANG, BANG_EQUAL,
            EQUAL, EQUAL_EQUAL,
            GREATER, GREATER_EQUAL,
            LESS, LESS_EQUAL,

            // Literals.
            IDENTIFIER, STRING, NUMBER,

            // Keywords.
            AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,
            PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,

            EOF
        }

        /// <summary>
        /// Identifies what kind of Token this is.
        /// </summary>
        public TokenType Type { get; }

        /// <summary>
        /// A <see langword="string"/> containing the source which generated this Token.
        /// </summary>
        public string Lexeme { get; }

        /// <summary>
        /// An <see langword="object"/> which represents a literal value. May be <see langword="null"/>.
        /// </summary>
        public object? Literal { get; }

        /// <summary>
        /// An <see langword="int"/> indicating which line of source code this Token's lexeme comes from.
        /// </summary>
        public int Line { get; }

        /// <summary>
        /// Constructs a Token.
        /// </summary>
        /// <param name="type">The type of token to create.</param>
        /// <param name="lexeme">The source text this token was generated from.</param>
        /// <param name="literal"></param>
        /// <param name="line"></param>
        public Token(TokenType type, string lexeme, object? literal, int line)
        {
            Type = type;
            Lexeme = lexeme;
            Literal = literal;
            Line = line;
        }

        public override string ToString()
        {
            return $"{Type} {Lexeme} {Literal}";
        }
    }
}
