<?xml version="1.0" encoding="utf-8"?>
<topic id="716f8028-ab18-49b5-b512-a30f8d353223" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>Here we will examine how to use CsLox.</para>
    </summary>

    <introduction>
      <para>This section details the command line interface for using CsLox.</para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Interpreting a file.</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Run CsLox with the run command as detailed below, replacing <userInput>filename.ext</userInput> with the name of whatever file you wish to interpret.
            </para>
            <code language="batch" title="Run command">
              CsLox run [filename.ext]
            </code>
            <para>
              If the filename is left blank, CsLox will look for a file named <literal>Main.lox</literal> instead and interpret that if it is found. If no file exists, the program will simply fail with an error.
            </para>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <para>
            You should see watever output the Lox script generated after running it, or an error indicating something went wrong while attempting to interpret the file.
          </para>
        </content>
      </conclusion>
    </procedure>

    <procedure>
      <title>Compiling a file.</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Run CsLox with the build command as detailed below, replacing <userInput>filename.ext</userInput> with the name of whatever file you wish to interpret.
            </para>
            <code language="batch" title="Run command">
              CsLox build [filename.ext]
            </code>
            <para>
              If the filename is left blank, CsLox will look for a file named <literal>Main.lox</literal> instead and compile that if it is found. If no file exists, the program will simply fail with an error.
            </para>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <para>
            The resulting bytecode file will be created in the same directory as the provided source file, with the same name, but a different extension.
          </para>
        </content>
      </conclusion>
    </procedure>

    <procedure>
      <title>Running the REPL</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Run CsLox with the repl command as detailed below.
            </para>
            <code language="batch" title="Run command">
              CsLox repl
            </code>
            <para>
              This will immediately drop you into the Lox REPL, where you can type code and have it interpreted after entering each line of code.
            </para>
          </content>
        </step>
      </steps>
      <!--
      <conclusion>
        <content>
          <para>
            
          </para>
        </content>
      </conclusion>
      -->
    </procedure>

    <section>
      <title>Debugging commands</title>
      <content>
        <procedure>
          <title>Printing Lexer output</title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  Run CsLox with the 
                </para>
                <code language="batch" title="Run command">
                  CsLox debug lex [filename.ext]
                </code>
                <para>
                  This will print out the tokens generated by the lexer.
                </para>
              </content>
            </step>
          </steps>
          <conclusion>
            <content>
              <para>
                This command will print to the standard output, allowing you to pipe it to a file if you need to, or into another application for further processing.
              </para>
            </content>
          </conclusion>
        </procedure>
        <procedure>
          <title>Printing Parser output</title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  Run CsLox with the
                </para>
                <code language="batch" title="Run command">
                  CsLox debug parse [filename.ext]
                </code>
                <para>
                  This will print out the tokens generated by the lexer.
                </para>
              </content>
            </step>
          </steps>
          <conclusion>
            <content>
              <para>
                This command will print to the standard output, allowing you to pipe it to a file if you need to, or into another application for further processing.
              </para>
            </content>
          </conclusion>
        </procedure>
      </content>
    </section>
    

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
